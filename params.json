{"name":"CC Processing","tagline":"CC Processing Demo App for Braintree","body":"CCProcessing\r\n============\r\n\r\nCCProcApp is a demo app build for the Braintree interview process\r\n\r\n## Usage Instructions\r\nTo use open a terminal window on your Mac OS X or Linux.\r\n\r\n### Install\r\nExtract the files from the supplied zip file, keeping the directory structure intact. Navigate to the program directory and enter the following:\r\n\r\n\t$ bundle install\r\n\r\nThis will install the Thor and RSpec gems.\r\n\r\n### Run\r\nTo view available commands\r\n\r\n\t$ ruby main.rb help\r\n\r\nTo run the program in interactive mode:\r\n\r\n\t$ ruby main.rb interactive\r\n\r\nTo load a file and process each line as a command:\r\n\r\n\t$ ruby main.rb file <filename>\r\n\t\r\n##### Interactive mode\r\nWhen entering interactive mode you will see the following prompt:\r\n\t\r\n\tPlease enter a command followed by space delimited parameters.\r\n\tCommands include:\r\n\t1. Add <name> <cc number> $<amount>\r\n\t2. Charge <name> $<amount>\r\n\t3. Credit <name> $<amount>\r\n\t4. Summary\r\n\t5. Quit\r\n\t> \r\n\r\nEnter a command and press the {return} button on your keyboard to submit the command and enter a new one. The interactive mode works in a similar manner to the terminal. To stop type “quit” and you will return to the terminal.\r\n\r\nPlease note that the “quit” command does not write the summary, you will have to type “Summary” to view the summary.\r\n\r\nNote that account names are case-sensitive. You cannot add an account with the same name twice.\r\n\r\n#### File mode\r\nI have provided a file with the application for easy testing. This file contains the example from the instructions file and is used in one of the tests for verification. To load the test file navigate to the program directory and type:\r\n\r\n\t$ ruby main.rb file spec/test.in\r\n\r\n\r\n### Test\r\nTo run the test suite navigate to the program directory and enter:\r\n\r\n\t$ rspec\r\n\t\r\nYou should see all the tests (58) have passed and displayed in green.\r\n\r\n##  Overview of Design Decisions\r\nI chose to use BDD with RSpec because it makes it easy to ensure all the requirements for the software have been implemented in the code. It made sure that no regression bugs have occured while adding functionality.\r\n\r\nI divided the program into Accounts and Transactions with an interpreter model (main and CCProcApp) to help execute the client commands.\r\n\r\nThe transactions can be of type credit or charge and are stored in an array in the Account. The Account is responsible for calculating the balance by iterating over the transactions and summing up the charges as positive and credits as negative.\r\n\r\nIdeally, I would separate the CCProcApp into an accounts_controller which will contain the add, charge, credit and summary function. However, for the sake of simplicity and time I decided to put them in one. \r\n\r\n## Why Ruby\r\n1. Lightweight\r\n2. Elegant syntax\r\n3. Does not require to compile each time\r\n4. Powerful bdd framework (RSpec)\r\n5. Works great on Mac\r\n6. Gems are really helpful and time saving (e.g. Luhn 10 validator, Thor for commandline arguments)\r\n7. Braintree works with Ruby on Rails so building the project in ruby is a good opportunity to showcase my skills\r\n","google":"UA-46339174-1","note":"Don't delete this file! It's used internally to help with page regeneration."}